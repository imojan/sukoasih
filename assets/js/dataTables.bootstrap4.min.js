/*!
 * DataTables Bootstrap 4 integration
 * Â©2011-2017 SpryMedia Ltd - datatables.net/license
 */
(function(factory) {
    if (typeof define === 'function' && define.amd) {
        // AMD support
        define(['jquery', 'datatables.net'], function($) {
            return factory($, window, document);
        });
    } else if (typeof exports === 'object') {
        // CommonJS support
        module.exports = function(root, $) {
            if (!root) root = window;
            if (!$ || !$.fn.dataTable) {
                $ = require('datatables.net')(root, $).$;
            }
            return factory($, root, root.document);
        };
    } else {
        // Browser global
        factory(jQuery, window, document);
    }
}(function($, window, document, undefined) {

    var DataTable = $.fn.dataTable;

    // Extend default DataTable settings
    $.extend(true, DataTable.defaults, {
        dom:
            "<'row'<'col-sm-12 col-md-6'l><'col-sm-12 col-md-6'f>>" +
            "<'row'<'col-sm-12'tr>>" +
            "<'row'<'col-sm-12 col-md-5'i><'col-sm-12 col-md-7'p>>",
        renderer: 'bootstrap'
    });

    // Extend DataTable classes to match Bootstrap 4
    $.extend(DataTable.ext.classes, {
        sWrapper: "dataTables_wrapper dt-bootstrap4",
        sFilterInput: "form-control form-control-sm",
        sLengthSelect: "custom-select custom-select-sm form-control form-control-sm",
        sProcessing: "dataTables_processing card",
        sPageButton: "paginate_button page-item"
    });

    // Custom pagination button renderer for Bootstrap 4
    DataTable.ext.renderer.pageButton.bootstrap = function(settings, host, idx, buttons, page, pages) {
        var api = new DataTable.Api(settings);
        var classes = settings.oClasses;
        var lang = settings.oLanguage.oPaginate;
        var aria = settings.oLanguage.oAria.paginate || {};
        var btnIndex = 0;

        var attach = function(container, buttons) {
            buttons.forEach(function(btn) {
                if (Array.isArray(btn)) {
                    attach(container, btn);
                } else {
                    var display, className;
                    switch (btn) {
                        case 'ellipsis':
                            display = '&#x2026;';
                            className = 'disabled';
                            break;

                        case 'first':
                            display = lang.sFirst;
                            className = (page > 0 ? '' : 'disabled');
                            break;

                        case 'previous':
                            display = lang.sPrevious;
                            className = (page > 0 ? '' : 'disabled');
                            break;

                        case 'next':
                            display = lang.sNext;
                            className = (page < pages - 1 ? '' : 'disabled');
                            break;

                        case 'last':
                            display = lang.sLast;
                            className = (page < pages - 1 ? '' : 'disabled');
                            break;

                        default:
                            display = btn + 1;
                            className = (page === btn ? 'active' : '');
                            break;
                    }

                    if (display) {
                        var li = $('<li>', {
                            'class': classes.sPageButton + ' ' + className,
                            'id': idx === 0 && typeof btn === 'string' ? settings.sTableId + '_' + btn : null
                        });

                        var a = $('<a>', {
                            href: '#',
                            'aria-controls': settings.sTableId,
                            'aria-label': aria[btn],
                            'data-dt-idx': btnIndex,
                            'tabindex': settings.iTabIndex,
                            'class': 'page-link'
                        }).html(display);

                        li.append(a).appendTo(container);

                        settings.oApi._fnBindAction(li, { action: btn }, function(e) {
                            e.preventDefault();
                            if (!$(e.currentTarget).hasClass('disabled') && api.page() !== btn) {
                                api.page(btn).draw('page');
                            }
                        });

                        btnIndex++;
                    }
                }
            });
        };

        // Preserve focus on current button if possible
        try {
            var active = $(host).find(document.activeElement).data('dt-idx');
        } catch (e) {}

        var ul = $('<ul class="pagination"/>').appendTo($(host).empty());
        attach(ul, buttons);

        if (active !== undefined) {
            $(host).find('[data-dt-idx=' + active + ']').trigger('focus');
        }
    };

    return DataTable;
}));
